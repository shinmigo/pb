// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shoppb/image.proto

package shoppb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadReq struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadReq) Reset()         { *m = UploadReq{} }
func (m *UploadReq) String() string { return proto.CompactTextString(m) }
func (*UploadReq) ProtoMessage()    {}
func (*UploadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbae688fa26549ab, []int{0}
}

func (m *UploadReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadReq.Unmarshal(m, b)
}
func (m *UploadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadReq.Marshal(b, m, deterministic)
}
func (m *UploadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadReq.Merge(m, src)
}
func (m *UploadReq) XXX_Size() int {
	return xxx_messageInfo_UploadReq.Size(m)
}
func (m *UploadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadReq proto.InternalMessageInfo

func (m *UploadReq) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *UploadReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UploadRes struct {
	ImageId              string   `protobuf:"bytes,1,opt,name=ImageId,proto3" json:"ImageId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRes) Reset()         { *m = UploadRes{} }
func (m *UploadRes) String() string { return proto.CompactTextString(m) }
func (*UploadRes) ProtoMessage()    {}
func (*UploadRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbae688fa26549ab, []int{1}
}

func (m *UploadRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRes.Unmarshal(m, b)
}
func (m *UploadRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRes.Marshal(b, m, deterministic)
}
func (m *UploadRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRes.Merge(m, src)
}
func (m *UploadRes) XXX_Size() int {
	return xxx_messageInfo_UploadRes.Size(m)
}
func (m *UploadRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRes.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRes proto.InternalMessageInfo

func (m *UploadRes) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

type GetImageReq struct {
	ImageId              string   `protobuf:"bytes,1,opt,name=ImageId,proto3" json:"ImageId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetImageReq) Reset()         { *m = GetImageReq{} }
func (m *GetImageReq) String() string { return proto.CompactTextString(m) }
func (*GetImageReq) ProtoMessage()    {}
func (*GetImageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbae688fa26549ab, []int{2}
}

func (m *GetImageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetImageReq.Unmarshal(m, b)
}
func (m *GetImageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetImageReq.Marshal(b, m, deterministic)
}
func (m *GetImageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetImageReq.Merge(m, src)
}
func (m *GetImageReq) XXX_Size() int {
	return xxx_messageInfo_GetImageReq.Size(m)
}
func (m *GetImageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetImageReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetImageReq proto.InternalMessageInfo

func (m *GetImageReq) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

type ImageContent struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	ImageId              string   `protobuf:"bytes,2,opt,name=ImageId,proto3" json:"ImageId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageContent) Reset()         { *m = ImageContent{} }
func (m *ImageContent) String() string { return proto.CompactTextString(m) }
func (*ImageContent) ProtoMessage()    {}
func (*ImageContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbae688fa26549ab, []int{3}
}

func (m *ImageContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageContent.Unmarshal(m, b)
}
func (m *ImageContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageContent.Marshal(b, m, deterministic)
}
func (m *ImageContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageContent.Merge(m, src)
}
func (m *ImageContent) XXX_Size() int {
	return xxx_messageInfo_ImageContent.Size(m)
}
func (m *ImageContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageContent.DiscardUnknown(m)
}

var xxx_messageInfo_ImageContent proto.InternalMessageInfo

func (m *ImageContent) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ImageContent) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadReq)(nil), "shoppb.UploadReq")
	proto.RegisterType((*UploadRes)(nil), "shoppb.UploadRes")
	proto.RegisterType((*GetImageReq)(nil), "shoppb.GetImageReq")
	proto.RegisterType((*ImageContent)(nil), "shoppb.ImageContent")
}

func init() { proto.RegisterFile("shoppb/image.proto", fileDescriptor_fbae688fa26549ab) }

var fileDescriptor_fbae688fa26549ab = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0xce, 0xc8, 0x2f,
	0x28, 0x48, 0xd2, 0xcf, 0xcc, 0x4d, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x83, 0x88, 0x29, 0x59, 0x72, 0x71, 0x86, 0x16, 0xe4, 0xe4, 0x27, 0xa6, 0x04, 0xa5, 0x16, 0x0a,
	0x49, 0x70, 0xb1, 0x3b, 0xe7, 0xe7, 0x95, 0xa4, 0xe6, 0x95, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0,
	0x04, 0xc1, 0xb8, 0x42, 0x42, 0x5c, 0x2c, 0x7e, 0x89, 0xb9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x60, 0xb6, 0x92, 0x2a, 0x42, 0x6b, 0x31, 0x48, 0xab, 0x27, 0xc8, 0x78, 0xcf, 0x14,
	0xb0, 0x56, 0xce, 0x20, 0x18, 0x57, 0x49, 0x9d, 0x8b, 0xdb, 0x3d, 0xb5, 0x04, 0xcc, 0x83, 0xda,
	0x81, 0x43, 0xa1, 0x13, 0x17, 0x0f, 0x98, 0x09, 0xb3, 0x13, 0xb7, 0x6b, 0x90, 0xcc, 0x60, 0x42,
	0x31, 0xc3, 0xa8, 0x84, 0x8b, 0x1b, 0xcc, 0x0c, 0x4e, 0x2d, 0xcb, 0x4c, 0x4e, 0x15, 0xd2, 0xe3,
	0x62, 0x83, 0x38, 0x51, 0x48, 0x50, 0x0f, 0xe2, 0x61, 0x3d, 0xb8, 0x6f, 0xa5, 0x30, 0x84, 0x8a,
	0x85, 0x4c, 0xb9, 0x38, 0x60, 0x6e, 0x15, 0x12, 0x86, 0x49, 0x23, 0xb9, 0x5e, 0x4a, 0x04, 0x26,
	0x88, 0xec, 0x52, 0x27, 0xf9, 0x28, 0xd9, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc,
	0x5c, 0xfd, 0xe2, 0x8c, 0xcc, 0xbc, 0xdc, 0xcc, 0xf4, 0x7c, 0xfd, 0x82, 0x24, 0x7d, 0x88, 0xea,
	0x24, 0x36, 0x70, 0xa0, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x9d, 0x14, 0xb3, 0x8a,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageSeviceClient is the client API for ImageSevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageSeviceClient interface {
	Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadRes, error)
	GetImage(ctx context.Context, in *GetImageReq, opts ...grpc.CallOption) (*ImageContent, error)
}

type imageSeviceClient struct {
	cc *grpc.ClientConn
}

func NewImageSeviceClient(cc *grpc.ClientConn) ImageSeviceClient {
	return &imageSeviceClient{cc}
}

func (c *imageSeviceClient) Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadRes, error) {
	out := new(UploadRes)
	err := c.cc.Invoke(ctx, "/shoppb.ImageSevice/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageSeviceClient) GetImage(ctx context.Context, in *GetImageReq, opts ...grpc.CallOption) (*ImageContent, error) {
	out := new(ImageContent)
	err := c.cc.Invoke(ctx, "/shoppb.ImageSevice/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageSeviceServer is the server API for ImageSevice service.
type ImageSeviceServer interface {
	Upload(context.Context, *UploadReq) (*UploadRes, error)
	GetImage(context.Context, *GetImageReq) (*ImageContent, error)
}

// UnimplementedImageSeviceServer can be embedded to have forward compatible implementations.
type UnimplementedImageSeviceServer struct {
}

func (*UnimplementedImageSeviceServer) Upload(ctx context.Context, req *UploadReq) (*UploadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedImageSeviceServer) GetImage(ctx context.Context, req *GetImageReq) (*ImageContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}

func RegisterImageSeviceServer(s *grpc.Server, srv ImageSeviceServer) {
	s.RegisterService(&_ImageSevice_serviceDesc, srv)
}

func _ImageSevice_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageSeviceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoppb.ImageSevice/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageSeviceServer).Upload(ctx, req.(*UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageSevice_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageSeviceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shoppb.ImageSevice/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageSeviceServer).GetImage(ctx, req.(*GetImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageSevice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shoppb.ImageSevice",
	HandlerType: (*ImageSeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _ImageSevice_Upload_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _ImageSevice_GetImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shoppb/image.proto",
}
